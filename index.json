[{"categories":["时序数据库"],"content":"基于原生安装方式进行部署 ","date":"2020-09-04","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/:0:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份进程模式","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"categories":["时序数据库"],"content":"服务器 s1r1（分片1副本1）、s3r2（分片3副本2） 位于 s1 服务器 s2r1（分片2副本1）、s1r2 （分片1副本2）位于 s2 服务器 s3r1（分片3副本1）、s2r2（分片2副本2） 位于 s3 服务器 zoo1（位于s1）、zoo2（位于s2）、zoo3 （位于s3）为 zookeeper集群 本文中的IP如下： s1 -\u003e 10.88.76.227 s2 -\u003e10.88.76.228 s3 -\u003e 10.88.76.229 ","date":"2020-09-04","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/:1:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份进程模式","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"categories":["时序数据库"],"content":"设置Host 在 s1、s2、s3中的/etc/hosts 中添加以下内容（需替换为自己的IP） 10.88.76.227 s1 10.88.76.228 s2 10.88.76.229 s3 10.88.76.227 s1r1 10.88.76.228 s1r2 10.88.76.228 s2r1 10.88.76.229 s2r2 10.88.76.229 s3r1 10.88.76.227 s3r2 10.88.76.227 zoo1 10.88.76.228 zoo2 10.88.76.229 zoo3 ","date":"2020-09-04","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/:2:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份进程模式","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"categories":["时序数据库"],"content":"部署Zookeeper 此处示例为3.6.1版本 wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz tar -zxf apache-zookeeper-3.6.1-bin.tar.gz cd apache-zookeeper-3.6.1-bin cp conf/zoo_sample.cfg conf/zoo.cfg vim conf/zoo.cfg # 内容见下方 bin/zkServer.sh start conf/zoo.cfg 内容为： tickTime=2000 initLimit=10 syncLimit=5 dataDir=/var/lib/zookeeper clientPort=2181 server.1=s1:2888:3888 server.2=s2:2888:3888 server.3=s3:2888:3888 在s1、s2和s3服务器中分别执行命令验证安装结果： bin/zkServer.sh status ","date":"2020-09-04","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/:3:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份进程模式","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"categories":["时序数据库"],"content":"安装ClickHouse sudo apt-get install apt-transport-https ca-certificates dirmngr sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E0C56BD4 echo \"deb https://repo.clickhouse.tech/deb/stable/ main/\" | sudo tee \\ /etc/apt/sources.list.d/clickhouse.list sudo apt-get update sudo apt-get install -y clickhouse-server clickhouse-client ","date":"2020-09-04","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/:4:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份进程模式","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"categories":["时序数据库"],"content":"ClickHouse工作目录 # s1 ├── create_table.sh #（测试用）创建表 ├── data_p.csv #（测试用）示例数据 ├── delete_table.sh #（测试用）删除表 ├── insert_data.sh #（测试用）导入示例数据 ├── query_table.sh #（测试用）查询导入的数据量 ├── s1r1 │ ├── config.xml # 配置文件 │ ├── metrika.xml # 分片配置文件 │ └── var # 数据库启动后的相关文件 ├── s1r1.log # 日志 ├── s3r2 │ ├── config.xml │ ├── metrika.xml │ └── var ├── s3r2.log └── users.xml # s2 ├── s1r2 │ ├── config.xml │ ├── metrika.xml │ └── var ├── s1r2.log ├── s2r1 │ ├── config.xml │ ├── metrika.xml │ └── var ├── s2r1.log └── users.xml # s3 ├── s2r2 │ ├── config.xml │ ├── metrika.xml │ └── var ├── s2r2.log ├── s3r1 │ ├── config.xml │ ├── metrika.xml │ └── var ├── s3r1.log └── users.xml 配置中tcp访问端口如下： s1r1:9111 s3r2:9132 s2r1:9121 s1r2:9112 s3r1:9131 s2r2:9122 ","date":"2020-09-04","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/:5:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份进程模式","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"categories":["时序数据库"],"content":"运行ClickHouse # s1 nohup clickhouse-server --config-file=/root/iot/chdb/s1r1/config.xml \u003e s1r1.log 2\u003e\u00261 \u0026 nohup clickhouse-server --config-file=/root/iot/chdb/s3r2/config.xml \u003e s3r2.log 2\u003e\u00261 \u0026 # s2 nohup clickhouse-server --config-file=/root/iot/chdb/s1r2/config.xml \u003e s1r2.log 2\u003e\u00261 \u0026 nohup clickhouse-server --config-file=/root/iot/chdb/s2r1/config.xml \u003e s2r1.log 2\u003e\u00261 \u0026 # s3 nohup clickhouse-server --config-file=/root/iot/chdb/s2r2/config.xml \u003e s2r2.log 2\u003e\u00261 \u0026 nohup clickhouse-server --config-file=/root/iot/chdb/s3r1/config.xml \u003e s3r1.log 2\u003e\u00261 \u0026 停止运行： ps -A | grep click | awk ‘{print $1}’ | xargs kill ","date":"2020-09-04","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/:6:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份进程模式","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"categories":["时序数据库"],"content":"自定义用户名和密码 在users.xml中有详细的注释说明了如何添加用户、密码、用户权限等配置方法。（配置文件中已添加了以下内容，需要其他账户可参考以下步骤） 添加defualt用户密码和新建一个tom用户，由于密码存储在文件，因此推荐使用sha256编码后放入文件： echo -n \"default\" | sha256sum | tr -d '-'··· # 37a8eec1ce19687d132fe29051dca629d164e2c4958ba141d5f4133a33f0688f echo -n \"tom-password\" | sha256sum | tr -d '-' # d8c862690b30f6f2add244327715cb08ac926c7c2fb4fcbb7694650bfde5b672 default用户密码为default，tom的密码为tom-password，添加至users.xml，在 users/default中删除password项，添加： \u003cpassword_sha256_hex\u003e37a8eec1ce19687d132fe29051dca629d164e2c4958ba141d5f4133a33f0688f\u003c/password_sha256_hex\u003e 在users/下添加： \u003ctom\u003e \u003cpassword_sha256_hex\u003ed8c862690b30f6f2add244327715cb08ac926c7c2fb4fcbb7694650bfde5b672\u003c/password_sha256_hex\u003e \u003cprofile\u003edefault\u003c/profile\u003e \u003cquota\u003edefault\u003c/quota\u003e \u003cnetworks incl=\"networks\" replace=\"replace\"\u003e \u003cip\u003e::/0\u003c/ip\u003e \u003c/networks\u003e \u003c/tom\u003e 登陆数据库： clickhouse-client --host s1r1 -u default --password default --port 9111 clickhouse-client --host s1r1 --user tom --password tom-password --port 9111 ","date":"2020-09-04","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/:7:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份进程模式","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"categories":["时序数据库"],"content":"测试（在s1上执行操作） 执行create_table.sh来创建表，其内容如下： #!/bin/bash hosts=(\"s1r1\" \"s3r2\" \"s2r1\" \"s1r2\" \"s3r1\" \"s2r2\") ports=(\"9111\" \"9132\" \"9121\" \"9112\" \"9131\" \"9122\") for idx in {0..5} do host=${hosts[${idx}]} port=${ports[${idx}]} echo \"Creating table on $host:$port\" clickhouse-client --user default --password default --host $host --port $port --query \\ \"CREATE TABLE p ( ozone Int8, particullate_matter Int8, carbon_monoxide Int8, sulfure_dioxide Int8, nitrogen_dioxide Int8, longitude Float64, latitude Float64, timestamp DateTime ) ENGINE = ReplicatedMergeTree('/clickhouse/tables/p/{shard}','{replica}') ORDER BY timestamp PRIMARY KEY timestamp\" done 执行insert_data.sh来创建分布表并插入数据，其内容如下： #!/bin/bash clickhouse-client --host s1r1 -u default --password default --port 9111 --query \"CREATE TABLE p_all AS p ENGINE = Distributed(p_3shards_2replicas, default, p, rand())\" clickhouse-client --host s1r1 -u default --password default --port 9111 --query \"INSERT INTO p_all FORMAT CSV\" \u003c data_p.csv 执行query_table.sh来查询各个分片和备份的数据量，其内容如下： #!/bin/bash hosts=(\"s1r1\" \"s3r2\" \"s2r1\" \"s1r2\" \"s3r1\" \"s2r2\") ports=(\"9111\" \"9132\" \"9121\" \"9112\" \"9131\" \"9122\") for idx in {0..5} do host=${hosts[${idx}]} port=${ports[${idx}]} echo \"Data size from $host:$port\" clickhouse-client --user default --password default --host $host --port $port --query \\ \"select count(*) from p\" done ","date":"2020-09-04","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/:8:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份进程模式","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%BC%8F/"},{"categories":["边缘计算"],"content":"Baetyl v2.0.0安装指南 ","date":"2020-08-31","objectID":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:0:0","tags":["Baetyl"],"title":"Baetyl V2安装指南","uri":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["边缘计算"],"content":"Docker /etc/docker/daemon.json中添加/修改： { \"exec-opts\": [\"native.cgroupdriver=systemd\"], \"registry-mirrors\": [\"https://docker.mirrors.ustc.edu.cn/\"], } 重启Docker ","date":"2020-08-31","objectID":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:1:0","tags":["Baetyl"],"title":"Baetyl V2安装指南","uri":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["边缘计算"],"content":"Kubernets ","date":"2020-08-31","objectID":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:2:0","tags":["Baetyl"],"title":"Baetyl V2安装指南","uri":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["边缘计算"],"content":"Rancher 参考官方文档和国内部署 docker run -itd -p 9080:80 -p 9443:443 \\ --name rancher \\ --restart=unless-stopped \\ -e CATTLE_AGENT_IMAGE=\"registry.cn-hangzhou.aliyuncs.com/rancher/rancher-agent:v2.4.2\" \\ registry.cn-hangzhou.aliyuncs.com/rancher/rancher:v2.4.2 ","date":"2020-08-31","objectID":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:2:1","tags":["Baetyl"],"title":"Baetyl V2安装指南","uri":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["边缘计算"],"content":"k3s 使用国内源安装 curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -s - server --docker 配置config cp /etc/rancher/k3s/k3s.yaml ~/.kube/config 添加本地存储支持： wget https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml kubectl create -f local-path-storage.yaml 设置该存储为默认存储： kubectl patch storageclass local-path -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}' ","date":"2020-08-31","objectID":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:2:2","tags":["Baetyl"],"title":"Baetyl V2安装指南","uri":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["边缘计算"],"content":"K8S # 安装 kubeadm kubectl kubelet gpg --keyserver keyserver.ubuntu.com --recv-keys BA07F4FB gpg --export --armor BA07F4FB | sudo apt-key add - echo \"deb https://mirrors.tuna.tsinghua.edu.cn/kubernetes/apt kubernetes-xenial main\" \u003e /etc/apt/sources.list.d/kubernetes.list apt update apt install kubeadm kubectl kubelet # 查看指定k8s版本需要哪些镜像 kubeadm config images list --kubernetes-version v1.18.3 终端输出： k8s.gcr.io/kube-apiserver:1.18.3 k8s.gcr.io/kube-controller-manager:v1.18.3 k8s.gcr.io/kube-scheduler:v1.18.3 k8s.gcr.io/kube-proxy:v1.18.3 k8s.gcr.io/pause:3.2 k8s.gcr.io/etcd:3.4.3-0 k8s.gcr.io/coredns:1.6.7 新建脚本get-k8s-images.sh 并替换版本号： #!/bin/bash images=( kube-apiserver:v1.18.3 kube-controller-manager:v1.18.3 kube-scheduler:v1.18.3 kube-proxy:v1.18.3 pause:3.2 etcd:3.4.3-0 coredns:1.6.7 ) for imageName in ${images[@]} ; do docker pull registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName docker tag registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName k8s.gcr.io/$imageName docker rmi registry.cn-hangzhou.aliyuncs.com/google_containers/$imageName done 执行get-k8s-images.sh 以便从国内hub获取镜像。修改kubelet配置中的默认cgroup driver： cat \u003e /var/lib/kubelet/config.yaml \u003c\u003cEOF apiVersion: kubelet.config.k8s.io/v1beta1 kind: KubeletConfiguration cgroupDriver: systemd EOF systemctl restart kubelet 启动k8s： kubeadm init --pod-network-cidr=10.244.0.0/16 --kubernetes-version=v1.18.3 启动完毕后有后续步骤的相关提示，具体操作为配置$HOME/.kube/config： mkdir -p $HOME/.kube sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config sudo chown $(id -u):$(id -g) $HOME/.kube/config 添加网络组件（Flannel）： wget https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml kubectl apply -f kube-flannel.yml 添加本地存储支持： wget https://raw.githubusercontent.com/rancher/local-path-provisioner/master/deploy/local-path-storage.yaml kubectl create -f local-path-storage.yaml 设置该存储为默认存储： kubectl patch storageclass local-path -p '{\"metadata\": {\"annotations\":{\"storageclass.kubernetes.io/is-default-class\":\"true\"}}}' ","date":"2020-08-31","objectID":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:2:3","tags":["Baetyl"],"title":"Baetyl V2安装指南","uri":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["边缘计算"],"content":"安装Baetyl 参考官方文档 在安装边缘节点时报错： curl -d \"{\\\"name\\\":\\\"demo-node\\\"}\" -H \"Content-Type: application/json\" -X POST http://0.0.0.0:30004/v1/nodes {\"code\":\"UnknownError\",\"message\":\"nodes.cloud.baetyl.io \\\"demo-node\\\" is forbidden: User \\\"system:serviceaccount:default:baetyl-cloud\\\" cannot get resource \\\"nodes\\\" in API group \\\"cloud.baetyl.io\\\" in the namespace \\\"baetyl-cloud\\\"\",\"requestId\":\"\"} 临时的解决办法：为账户baetyl-cloud添加所有相关权限： kind:ClusterRoleapiVersion:rbac.authorization.k8s.io/v1metadata:name:my-baetyl-crlabels:custom:role-patchrules:- apiGroups:- cloud.baetyl.ioresources:- nodes- applications- configurations- nodedesires- nodereports- secretsverbs:- get- list- watch- create- update- patch- delete apiVersion:rbac.authorization.k8s.io/v1kind:ClusterRoleBindingmetadata:name:my-baetyl-crblabels:custom:role-patchroleRef:apiGroup:rbac.authorization.k8s.iokind:ClusterRolename:my-baetyl-crsubjects:- kind:ServiceAccountname:baetyl-cloudnamespace:default ","date":"2020-08-31","objectID":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/:3:0","tags":["Baetyl"],"title":"Baetyl V2安装指南","uri":"/baetyl-v2%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97/"},{"categories":["边缘计算"],"content":"国内网络环境下快速安装k8s ","date":"2020-08-31","objectID":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/:0:0","tags":["Kubeedge"],"title":"Kubeedge 国内环境安装","uri":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"categories":["边缘计算"],"content":"安装k8s或k3s 参考官方网站的文档即可，k8s的配置部分参考kubeedge官方文档 ","date":"2020-08-31","objectID":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/:1:0","tags":["Kubeedge"],"title":"Kubeedge 国内环境安装","uri":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"categories":["边缘计算"],"content":"配置安装环境 安装 kubeadm、kubectl： gpg --keyserver keyserver.ubuntu.com --recv-keys BA07F4FB gpg --export --armor BA07F4FB | sudo apt-key add - echo \"deb https://mirrors.tuna.tsinghua.edu.cn/kubernetes/apt kubernetes-xenial main\" \u003e /etc/apt/sources.list.d/kubernetes.list apt update apt install kubeadm kubectl ipvsadm 下载Golang安装包并解压到 /usr/local，添加环境变量： # Golang export GOROOT=/usr/local/go export GOPATH=/data/gopath export PATH=$PATH:$GOROOT/bin:$GOPATH/bin # Kubeedge export PATH=$PATH:/data/gopath/src/github.com/kubeedge/kubeedge/_output/local/bin source 环境变量文件使之生效。 ","date":"2020-08-31","objectID":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/:2:0","tags":["Kubeedge"],"title":"Kubeedge 国内环境安装","uri":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"categories":["边缘计算"],"content":"编译Kubeedge 克隆源码（gitclone.com 用于国内加速）： git clone https://gitclone.com/github.com/kubeedge/kubeedge $GOPATH/src/github.com/kubeedge/kubeedge 由于kubeedge安编译中需要使用git的历史信息，因此将remote改回github地址： git remote set-url origin https://github.com/kubeedge/kubeedge git remote show origin 创建工作目录： mkdir -p /data/gopath \u0026\u0026 cd /data/gopath mkdir -p src pkg bin 编译： cd $GOPATH/src/github.com/kubeedge/kubeedge make all WHAT=keadm make all WHAT=cloudcore make all WHAT=edgecore 成功编译后的文件位于 ./_output/local/bin，该目录在之前的环境变量中已添加。 ","date":"2020-08-31","objectID":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/:3:0","tags":["Kubeedge"],"title":"Kubeedge 国内环境安装","uri":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"categories":["边缘计算"],"content":"创建cloud节点 使用keadm进行快速部署，由于安装过程需要访问github相关资源，因此选择手动提前下载所需文件： g.ioiox.com 为github资源镜像加速，若失效则需自己替换可用镜像 版本号根据当前kubeedge版本自行替换 mkdir /etc/kubeedge cd /etc/kubeedge \u0026\u0026 wget https://g.ioiox.com/https://github.com/kubeedge/kubeedge/releases/download/v1.3.1/kubeedge-v1.3.1-linux-amd64.tar.gz 同时可能需要添加 raw.githubusercontent.com 的DNS解析： 151.101.108.133 raw.githubusercontent.com 创建cloud节点： IP替换为本机IP keadm init --advertise-address=\"IP\" 查看日志： tail -f /var/log/kubeedge/cloudcore.log ","date":"2020-08-31","objectID":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/:4:0","tags":["Kubeedge"],"title":"Kubeedge 国内环境安装","uri":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"categories":["边缘计算"],"content":"创建edge节点 在cloud端获取token： keadm gettoken 将cloud端的./_output/local/bin二进制文件拷贝至edge端并加入PATH，随后创建edge节点： CLOUD_IP 为前文中的cloud端暴露的IP TOKEN为获取到的token keadm join --cloudcore-ipport=CLOUD_IP:10000 --token=TOKEN 查看日志： tail -f /var/log/kubeedge/edgecore.log ","date":"2020-08-31","objectID":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/:5:0","tags":["Kubeedge"],"title":"Kubeedge 国内环境安装","uri":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"categories":["边缘计算"],"content":"删除/重置Kubeedge 停止当前运行的kubeedge组件： keadm reset 在cloud端： rm -r /etc/kubeedge kubectl delete CustomResourceDefinition $(k get CustomResourceDefinition | grep kubeedge | awk '{print $1}') 删除 /etc/kubeedge 目录后需要再次手动下载 kubeedge-v1.3.1-linux-amd64.tar.gz ","date":"2020-08-31","objectID":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/:6:0","tags":["Kubeedge"],"title":"Kubeedge 国内环境安装","uri":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"categories":["边缘计算"],"content":"验证 在cloud端： root@mq-228 /e/kubeedge# kubectl get no NAME STATUS ROLES AGE VERSION mq-228 Ready master 11d v1.18.6+k3s1 mq-227 Ready agent,edge 38m v1.17.1-kubeedge-v1.3.1 Counter Demo 未更新，按教程无法直接运行: apiVersion需要更新到v1alpha2 code.jquery.com无法在国内访问 ","date":"2020-08-31","objectID":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/:7:0","tags":["Kubeedge"],"title":"Kubeedge 国内环境安装","uri":"/kubeedge-%E5%9B%BD%E5%86%85%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"},{"categories":["时序数据库"],"content":"基于Docker的部署方式 ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:0:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"安装 安装 docker 安装 docker-compose docker pull yandex/clickhouse-server docker pull zookeeper ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:1:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"服务器设置 s1r1（分片1副本1）、s3r2（分片3副本2） 位于 s1 服务器 s2r1（分片2副本1）、s1r2 （分片1副本2）位于 s2 服务器 s3r1（分片3副本1）、s2r2（分片2副本2） 位于 s3 服务器 zoo1（位于s1）、zoo2（位于s2）、zoo3 （位于s3）为 zookeeper集群 /etc/hosts 映射信息，实际部署时需要替换为自己的服务器IP，本文只在s1服务器中添加hosts信息，后文中若未指明服务器名，则默认在s1中执行： [S1] s1 [S2] s2 [S3] s3 [S1] s1r1 [S2] s1r2 [S2] s2r1 [S3] s2r2 [S3] s3r1 [S1] s3r2 [S1] zoo1 [S2] zoo2 [S3] zoo3 ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:2:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"zookeeper 设置 使用 docker-compose 进行部署，docker-compose.yaml 文件内容如下： zoo1（s1服务器）: version:'3.1'services:zoo1:image:zookeeperrestart:alwayshostname:zoo1ports:- 2181:2181- 2888:2888- 3888:3888environment:ZOO_MY_ID:1ZOO_SERVERS:server.1=0.0.0.0:2888:3888;2181server.2=zoo2:2888:3888;2181server.3=zoo3:2888:3888;2181extra_hosts:- \"zoo1:[S1]\"- \"zoo2:[S2]\"- \"zoo3:[S3]\" zoo2（s2服务器）： version:'3.1'services:zoo2:image:zookeeperrestart:alwayshostname:zoo2ports:- 2181:2181- 2888:2888- 3888:3888environment:ZOO_MY_ID:2ZOO_SERVERS:server.1=zoo1:2888:3888;2181server.2=0.0.0.0:2888:3888;2181server.3=zoo3:2888:3888;2181extra_hosts:- \"zoo1:[S1]\"- \"zoo2:[S2]\"- \"zoo3:[S3]\" zoo3（s3服务器）: version:'3.1'services:zoo3:image:zookeeperrestart:alwayshostname:zoo3ports:- 2181:2181- 2888:2888- 3888:3888environment:ZOO_MY_ID:3ZOO_SERVERS:server.1=zoo1:2888:3888;2181server.2=zoo2:2888:3888;2181server.3=0.0.0.0:2888:3888;2181extra_hosts:- \"zoo1:[S1]\"- \"zoo2:[S2]\"- \"z003:[S3]\" 在s1、s2、s3上分别启动zookeeper： docker-compose up -d 停止容器 docker-compose stop 删除容器 docker-compose rm 显示容器 docker-compose ps 重启容器 docker-compose restart ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:3:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"配置数据库 ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:4:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"导出配置文件模版 首先启动一个临时容器来获取配置文件config.xml： docker run -itd --rm --name db yandex/clickhouse-server 拷贝config.xml和users.xml： docker cp db:/etc/clickhouse-server/config.xml ./config.xml docker cp db:/etc/clickhouse-server/users.xml ./users.xml 停止容器： docker stop db config.xml在三台服务器上均需要2份（2备份），users.xml在三台服务器中各需要一份（2备份共享该配置） ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:4:1","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"添加用户和密码 在users.xml中有详细的注释说明了如何添加用户、密码、用户权限等配置方法。这里添加defualt用户密码和新建一个tom用户，由于密码存储在文件，因此推荐使用sha256编码后放入文件： root@mq-228 ~/i/chdb# echo -n \"default\" | sha256sum | tr -d '-'··· 37a8eec1ce19687d132fe29051dca629d164e2c4958ba141d5f4133a33f0688f root@mq-228 ~/i/chdb# echo -n \"tom-password\" | sha256sum | tr -d '-' d8c862690b30f6f2add244327715cb08ac926c7c2fb4fcbb7694650bfde5b672 default用户密码为default，tom的密码为tom-password，添加至users.xml，在 users/default中删除password项，添加： \u003cpassword_sha256_hex\u003e37a8eec1ce19687d132fe29051dca629d164e2c4958ba141d5f4133a33f0688f\u003c/password_sha256_hex\u003e 在users/下添加： \u003ctom\u003e \u003cpassword_sha256_hex\u003ed8c862690b30f6f2add244327715cb08ac926c7c2fb4fcbb7694650bfde5b672\u003c/password_sha256_hex\u003e \u003cprofile\u003edefault\u003c/profile\u003e \u003cquota\u003edefault\u003c/quota\u003e \u003cnetworks incl=\"networks\" replace=\"replace\"\u003e \u003cip\u003e::/0\u003c/ip\u003e \u003c/networks\u003e \u003c/tom\u003e 随后即可通过以下命令登陆数据库： clickhouse-client -u default --password default --port 9001 clickhouse-client -u tom --password tom-password --port 9001 ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:4:2","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"设置监听网段 confix.xml中取消 listen_host 行的注释： \u003c!-- Listen specified host. use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from everywhere. --\u003e \u003clisten_host\u003e::\u003c/listen_host\u003e 数据库文件主要由 /etc/clickhouse-server/users.xml 、/etc/clickhouse-server/config.xml 、/etc/metrika.xml 文件构成，其中metrika.xml的内容会覆盖config.xml对应内容，由用户自行创建，主要用于设置分片和备份。metrika.xml的文件名和路径可以在config.xml中自定义。 ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:4:3","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"s1服务器 工作目录下的文件列表参考： root@mq-227 ~/i/chdb# tree . . ├── check_table_p.sh ├── config-s1r1.xml ├── config-s3r2.xml ├── create_table.sh ├── data_p.csv ├── delete_table_p.sh ├── docker-compose.yaml ├── metrika-s1r1.xml ├── metrika-s3r2.xml ├── metrika.xml ├── query_table.sh └── users.xml metrika-s1r1.xml内容（稍后在docker-compose.xml中会映射到容器内的metrika.xml）： \u003cyandex\u003e \u003c!-- 集群配置 --\u003e \u003cclickhouse_remote_servers\u003e \u003c!-- 3分片2备份，perftest_3shards_2replicas 为唯一ID--\u003e \u003cperftest_3shards_2replicas\u003e \u003cshard\u003e \u003cinternal_replication\u003efalse\u003c/internal_replication\u003e \u003creplica\u003e \u003chost\u003es1r1\u003c/host\u003e \u003cport\u003e9001\u003c/port\u003e \u003cuser\u003edefault\u003c/user\u003e \u003cpassword\u003edefault\u003c/password\u003e \u003c/replica\u003e \u003creplica\u003e \u003chost\u003es1r2\u003c/host\u003e \u003cport\u003e9002\u003c/port\u003e \u003cuser\u003edefault\u003c/user\u003e \u003cpassword\u003edefault\u003c/password\u003e \u003c/replica\u003e \u003c/shard\u003e \u003cshard\u003e \u003cinternal_replication\u003efalse\u003c/internal_replication\u003e \u003creplica\u003e \u003chost\u003es2r1\u003c/host\u003e \u003cport\u003e9001\u003c/port\u003e \u003cuser\u003edefault\u003c/user\u003e \u003cpassword\u003edefault\u003c/password\u003e \u003c/replica\u003e \u003creplica\u003e \u003chost\u003es2r2\u003c/host\u003e \u003cport\u003e9002\u003c/port\u003e \u003cuser\u003edefault\u003c/user\u003e \u003cpassword\u003edefault\u003c/password\u003e \u003c/replica\u003e \u003c/shard\u003e \u003cshard\u003e \u003cinternal_replication\u003efalse\u003c/internal_replication\u003e \u003creplica\u003e \u003chost\u003es3r1\u003c/host\u003e \u003cport\u003e9001\u003c/port\u003e \u003cuser\u003edefault\u003c/user\u003e \u003cpassword\u003edefault\u003c/password\u003e \u003c/replica\u003e \u003creplica\u003e \u003chost\u003es3r2\u003c/host\u003e \u003cport\u003e9002\u003c/port\u003e \u003cuser\u003edefault\u003c/user\u003e \u003cpassword\u003edefault\u003c/password\u003e \u003c/replica\u003e \u003c/shard\u003e \u003c/perftest_3shards_2replicas\u003e \u003c/clickhouse_remote_servers\u003e \u003c!-- ZooKeeper 配置 --\u003e \u003czookeeper-servers\u003e \u003cnode index=\"1\"\u003e \u003chost\u003ezoo1\u003c/host\u003e \u003cport\u003e2181\u003c/port\u003e \u003c/node\u003e \u003cnode index=\"2\"\u003e \u003chost\u003ezoo2\u003c/host\u003e \u003cport\u003e2181\u003c/port\u003e \u003c/node\u003e \u003cnode index=\"3\"\u003e \u003chost\u003ezoo3\u003c/host\u003e \u003cport\u003e2181\u003c/port\u003e \u003c/node\u003e \u003csession_timeout_ms\u003e30000\u003c/session_timeout_ms\u003e \u003coperation_timeout_ms\u003e10000\u003c/operation_timeout_ms\u003e \u003c/zookeeper-servers\u003e \u003c!-- 环境变量，不同分片需要替换ID，在创建表时可以引用该变量从而实现建表语句统一--\u003e \u003cmacros\u003e \u003cshard\u003es1\u003c/shard\u003e \u003creplica\u003er1\u003c/replica\u003e \u003c/macros\u003e \u003c/yandex\u003e 复制之前导出的config.xml并重命名为config-s1r1.xml （后文同），修改其TCP连接端口和同步端口： \u003ctcp_port\u003e9001\u003c/tcp_port\u003e \u003cinterserver_http_port\u003e9011\u003c/interserver_http_port\u003e metrika-s3r2.xml 与 metrika-s1r1.xml 内容相同，只需修改环境变量配置部分： \u003cmacros\u003e \u003cshard\u003es3\u003c/shard\u003e \u003creplica\u003er2\u003c/replica\u003e \u003c/macros\u003e config-s3r2.xml 修改其TCP连接端口和同步端口: \u003ctcp_port\u003e9002\u003c/tcp_port\u003e \u003cinterserver_http_port\u003e9013\u003c/interserver_http_port\u003e docker-compose.xml内容： version:'3.1'services:chdb-s1r1:image:yandex/clickhouse-server:latesthostname:s1r1ports:- 9001:9001- 9011:9011volumes:- /root/iot/chdb/users.xml:/etc/clickhouse-server/users.xml- /root/iot/chdb/config-s1r1.xml:/etc/clickhouse-server/config.xml- /root/iot/chdb/metrika-s1r1.xml:/etc/metrika.xml- /root/iot/chdb/s1r1:/var/lib/clickhouseextra_hosts:- \"s1r1:[S1]\"- \"s1r2:[S2]\"- \"s2r1:[S2]\"- \"s2r2:[S3]\"- \"s3r1:[S3]\"- \"s3r2:[S1]\"- \"zoo1:[S1]\"- \"zoo2:[S2]\"- \"zoo3:[S3]\"chdb-s3r2:image:yandex/clickhouse-server:latesthostname:s3r2ports:- 9002:9002- 9013:9013volumes:- /root/iot/chdb/users.xml:/etc/clickhouse-server/users.xml- /root/iot/chdb/config-s3r2.xml:/etc/clickhouse-server/config.xml- /root/iot/chdb/metrika-s3r2.xml:/etc/metrika.xml- /root/iot/chdb/s3r2:/var/lib/clickhouseextra_hosts:- \"s1r1:[S1]\"- \"s1r2:[S2]\"- \"s2r1:[S2]\"- \"s2r2:[S3]\"- \"s3r1:[S3]\"- \"s3r2:[S1]\"- \"zoo1:[S1]\"- \"zoo2:[S2]\"- \"zoo3:[S3]\" volumes选项中的本地路径需要按实际部署路径修改（下同），其中最后一条为数据库数据本地持久化映射，可按需更改文件位置。 ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:4:4","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"s2服务器 metrika-s2r1.xml 与 metrika-s1r1.xml 类似，只需修改环境变量配置部分： \u003cmacros\u003e \u003cshard\u003es2\u003c/shard\u003e \u003creplica\u003er1\u003c/replica\u003e \u003c/macros\u003e config-s2r1.xml 修改其TCP连接端口和同步端口: \u003ctcp_port\u003e9001\u003c/tcp_port\u003e \u003cinterserver_http_port\u003e9012\u003c/interserver_http_port\u003e metrika-s1r2.xml 与 metrika-s1r1.xml 类似，只需修改环境变量配置部分： \u003cmacros\u003e \u003cshard\u003es1\u003c/shard\u003e \u003creplica\u003er2\u003c/replica\u003e \u003c/macros\u003e config-s1r2.xml 修改其TCP连接端口和同步端口: \u003ctcp_port\u003e9002\u003c/tcp_port\u003e \u003cinterserver_http_port\u003e9011\u003c/interserver_http_port\u003e docker-compose.xml内容： version:'3.1'services:chdb-s2r1:image:yandex/clickhouse-server:latesthostname:s2r1ports:- 9001:9001- 9012:9012volumes:- /root/iot/chdb/users.xml:/etc/clickhouse-server/users.xml- /root/iot/chdb/config-s2r1.xml:/etc/clickhouse-server/config.xml- /root/iot/chdb/metrika-s2r1.xml:/etc/metrika.xml- /root/iot/chdb/s2r1:/var/lib/clickhouseextra_hosts:- \"s1r1:[S1]\"- \"s1r2:[S2]\"- \"s2r1:[S2]\"- \"s2r2:[S3]\"- \"s3r1:[S3]\"- \"s3r2:[S1]\"- \"zoo1:[S1]\"- \"zoo2:[S2]\"- \"zoo3:[S3]\"chdb-s1r2:image:yandex/clickhouse-server:latesthostname:s1r2ports:- 9002:9002- 9011:9011volumes:- /root/iot/chdb/users.xml:/etc/clickhouse-server/users.xml- /root/iot/chdb/config-s1r2.xml:/etc/clickhouse-server/config.xml- /root/iot/chdb/metrika-s1r2.xml:/etc/metrika.xml- /root/iot/chdb/s1r2:/var/lib/clickhouseextra_hosts:- \"s1r1:[S1]\"- \"s1r2:[S2]\"- \"s2r1:[S2]\"- \"s2r2:[S3]\"- \"s3r1:[S3]\"- \"s3r2:[S1]\"- \"zoo1:[S1]\"- \"zoo2:[S2]\"- \"zoo3:[S3]\" ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:4:5","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"s3服务器 metrika-s3r1.xml 需修改环境变量配置部分： \u003cmacros\u003e \u003cshard\u003es3\u003c/shard\u003e \u003creplica\u003er1\u003c/replica\u003e \u003c/macros\u003e config-s3r1.xml 修改其TCP连接端口和同步端口: \u003ctcp_port\u003e9001\u003c/tcp_port\u003e \u003cinterserver_http_port\u003e9013\u003c/interserver_http_port\u003e metrika-s2r2.xml 修改环境变量配置部分： \u003cmacros\u003e \u003cshard\u003es2\u003c/shard\u003e \u003creplica\u003er2\u003c/replica\u003e \u003c/macros\u003e config-s2r2.xml 修改其TCP连接端口和同步端口: \u003ctcp_port\u003e9002\u003c/tcp_port\u003e \u003cinterserver_http_port\u003e9012\u003c/interserver_http_port\u003e docker-compose.xml内容： version:'3.1'services:chdb-s3r1:image:yandex/clickhouse-server:latesthostname:s3r1ports:- 9001:9001- 9013:9013volumes:- /root/iot/chdb/users.xml:/etc/clickhouse-server/users.xml- /root/iot/chdb/config-s3r1.xml:/etc/clickhouse-server/config.xml- /root/iot/chdb/metrika-s3r1.xml:/etc/metrika.xml- /root/iot/chdb/s3r1:/var/lib/clickhouseextra_hosts:- \"s1r1:[S1]\"- \"s1r2:[S2]\"- \"s2r1:[S2]\"- \"s2r2:[S3]\"- \"s3r1:[S3]\"- \"s3r2:[S1]\"- \"zoo1:[S1]\"- \"zoo2:[S2]\"- \"zoo3:[S3]\"chdb-s2r2:image:yandex/clickhouse-server:latesthostname:s2r2ports:- 9002:9002- 9012:9012volumes:- /root/iot/chdb/users.xml:/etc/clickhouse-server/users.xml- /root/iot/chdb/config-s2r2.xml:/etc/clickhouse-server/config.xml- /root/iot/chdb/metrika-s2r2.xml:/etc/metrika.xml- /root/iot/chdb/s2r2:/var/lib/clickhouseextra_hosts:- \"s1r1:[S1]\"- \"s1r2:[S2]\"- \"s2r1:[S2]\"- \"s2r2:[S3]\"- \"s3r1:[S3]\"- \"s3r2:[S1]\"- \"zoo1:[S1]\"- \"zoo2:[S2]\"- \"zoo3:[S3]\" ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:4:6","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"验证 连接至任意数据库，查询集群信息： clickhouse-client -u default --password default --host s1r1 --port 9001 ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:5:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["时序数据库"],"content":"示例 ClickHouse备份使用的是表级备份，要使用备份需要使用 Replicated*表引擎，需要注意的是ClickHouse集群在执行 CREATE、 DROP、ATTACH、DETACH和RENAME时不会同步命令，因此创建表时需要在每个数据库实例中都进行创建。 在s1服务器上执行s1/create_table_p.sh脚本来创建表： ports=\"9001 9002\" hosts=\"s1 s2 s3\" for port in $ports do for host in $hosts do echo \"Creating table on $host:$port\" clickhouse-client -u default --password default --host $host --port $port --query \\ \"CREATE TABLE p ( ozone Int8, particullate_matter Int8, carbon_monoxide Int8, sulfure_dioxide Int8, nitrogen_dioxide Int8, longitude Float64, latitude Float64, timestamp DateTime ) ENGINE = ReplicatedMergeTree('/clickhouse/tables/p/{shard}','{replica}') ORDER BY timestamp PRIMARY KEY timestamp\" done done 为了使用分片，需要一个虚拟的统一入口表，ClickHouse中称为分布表（Distributed Table），可以简单认为是一个数据路由表。创建分布表： clickhouse-client --host s1r1 -u default --password default --port 9001 --query \"CREATE TABLE p_all AS p ENGINE = Distributed(perftest_3shards_2replicas, default, p, rand())\" 其中 perftest_3shards_2replicas 为之前定义的集群ID。然后导入测试数据： clickhouse-client --host s1r1 -u default --password default --port 9001 --query \"INSERT INTO p_all FORMAT CSV\" \u003c data_p.csv 查看数据分片存储的情况 s1/check_table_p.sh： ports=\"9001 9002\" hosts=\"s1 s2 s3\" for port in $ports do for host in $hosts do echo \"Data from $host:$port\" clickhouse-client -u default --password default --host $host --port $port --query \"select count(*) from p\" done done ","date":"2020-08-31","objectID":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/:6:0","tags":["ClickHouse","时序数据库"],"title":"ClickHouse 多分片多备份部署","uri":"/clickhouse-%E5%A4%9A%E5%88%86%E7%89%87%E5%A4%9A%E5%A4%87%E4%BB%BD%E9%83%A8%E7%BD%B2/"},{"categories":["Java"],"content":"JavaFX系列","date":"2020-05-04","objectID":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/","tags":["JavaFX","GUI"],"title":"JavaFX系列-开发环境","uri":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["Java"],"content":"本文主要介绍JavaFX环境的搭建和如何部署JavaFX应用 ","date":"2020-05-04","objectID":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:0:0","tags":["JavaFX","GUI"],"title":"JavaFX系列-开发环境","uri":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["Java"],"content":"添加JavaFX依赖 在工程 build.gradle 中加入以下内容： plugins { id 'application' id 'org.openjfx.javafxplugin' version '0.0.8' // 引入JavaFX的jar包 } javafx { version = \"14\" // Java版本 modules = [ 'javafx.controls' ] // 所需要的模块 manifest { mainClassName = 'com.ingbyr.vdm.gui.Main' // 运行入口 } } ","date":"2020-05-04","objectID":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:1:0","tags":["JavaFX","GUI"],"title":"JavaFX系列-开发环境","uri":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["Java"],"content":"自定义运行时 Java9引入的Jigsaw允许我们制作自己的JRE，从而有效地减少应用的大小 首先下载JavaFX的jmods保存到 ./jmods/中 jmods ├── javafx.base.jmod ├── javafx.controls.jmod ├── javafx.fxml.jmod ├── javafx.graphics.jmod ├── javafx.media.jmod ├── javafx.swing.jmod └── javafx.web.jmod 然后使用jlink生成自定义运行时 jlink \\ --module-path ./jmods \\ --add-modules java.base,javafx.base,javafx.graphics,javafx.controls \\ --output runtime module-path 第三方模块的目录 add-modules 运行时所需的模块 output 自定义运行时目录名称 生成的运行时目录如下 runtime ├── bin ├── conf ├── include ├── legal ├── lib ├── man └── release ","date":"2020-05-04","objectID":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:2:0","tags":["JavaFX","GUI"],"title":"JavaFX系列-开发环境","uri":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["Java"],"content":"编译应用 使用gradle插件application中提供的tasks -\u003e distribution -\u003e installDist构建任务来编译应用，生成的目录如下 build/install └── vdm-gui ├── bin │ ├── vdm-gui │ └── vdm-gui.bat └── lib ├── javafx-base-14-mac.jar ├── javafx-base-14.jar ├── javafx-controls-14-mac.jar ├── javafx-graphics-14-mac.jar ├── javafx-graphics-14.jar └── vdm-gui-2.0.0.jar ","date":"2020-05-04","objectID":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:3:0","tags":["JavaFX","GUI"],"title":"JavaFX系列-开发环境","uri":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":["Java"],"content":"部署应用 Java14中正式提供了jpackage工具，该工具可以十分方便的部署跨平台应用安装包，示例如下 jpackage \\ --input vdm-gui/build/install/vdm-gui/lib \\ --name vdm14 \\ --main-jar vdm-gui-2.0.0.jar \\ --main-class com.ingbyr.vdm.gui.Main \\ --type dmg \\ --runtime-image ~/IdeaProjects/vdm14/runtime input 需要打包的jar目录 name 应用名称 main-jar 主程序jar包 main-class 若jar中没有指定主类，则可以使用此参数指定 type 安装包类型，可选： Windows: exe msi Linux: rpm deb MacOS: pkg dmg runtime-image 自定义的运行时 ","date":"2020-05-04","objectID":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/:4:0","tags":["JavaFX","GUI"],"title":"JavaFX系列-开发环境","uri":"/javafx%E7%B3%BB%E5%88%97-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"},{"categories":null,"content":"下载 需要提前安装JRE8 （已安装JRE8的跳过此步骤） 下载页面下载VDM.zip，解压缩后运行VDM.jar 简介 VDM是适配多个视频命令行下载工具的GUI程序，已开源至 GitHub。 已适配下载引擎 youtube-dl annie FAQ ","date":"2018-08-31","objectID":"/youget-zh/:0:0","tags":["Kotlin","Tools"],"title":"VDM中文说明","uri":"/youget-zh/"},{"categories":null,"content":"自动更新引擎无法正常工作 如果软件内的自动更新总是失败的话（一般是因为访问github release过慢造成的），可以考虑手动更新引擎，方法如下: 在下载引擎发布页面下载对应的可执行文件。 将下载好的可执行文件放入VDM\\package\\windows\\engines文件夹内，并将文件名替换为对应名称。 修改VDM\\package\\engines.json中的对应版本号字段。 重启VDM完成更新。 ","date":"2018-08-31","objectID":"/youget-zh/:1:0","tags":["Kotlin","Tools"],"title":"VDM中文说明","uri":"/youget-zh/"},{"categories":null,"content":"下载的视频没有声音 部分下载引擎需要安装ffmpeg才能实现视频和音频的自动合并，所以出现此问题时需要手动安装ffmpeg，并且在VDM中设置ffmpeg路径或添加系统PATH。当然也可以更换下载引擎再次尝试。 反馈BUG 如果软件运行出错或者无法获取到多媒体资源，请在GitHub Issues进行反馈，我会尽快回复。 关于开发者 VDM 由 @ingbyr 开发 ","date":"2018-08-31","objectID":"/youget-zh/:2:0","tags":["Kotlin","Tools"],"title":"VDM中文说明","uri":"/youget-zh/"},{"categories":null,"content":"Spigot服务器（类Bukkit） ","date":"2018-08-03","objectID":"/mc-linux-server/:0:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"介绍 spigotmc是一个以高性能著称的MC服务器端，Spigot服务端只支持plugin形式的扩展，如果使用人数规模庞大需要追求高性能服务器，Spigot是不二的选择。 ","date":"2018-08-03","objectID":"/mc-linux-server/:1:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"安装 在官网下载BuildTools.jar文件后，需要自行编译出所需版本的服务器端文件，格式如下： java -jar BuildTools.jar --rev [版本号] 编译需要一段时间，完成编译后将生成的jar文件拷贝至单独的文件夹。 ","date":"2018-08-03","objectID":"/mc-linux-server/:2:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"插件配置 将插件（支持Spigot插件和Bukkit插件）拖入plugins文件夹中即可。 ","date":"2018-08-03","objectID":"/mc-linux-server/:3:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"运行服务器 在jar文件目录下，编写一小段脚本以简化启动命令，内容如下： java -Xms1024M -Xmx1024M -jar [your-jar-file] nogui 启动一个Screen终端，然后输入 sh start.sh 等待服务器启动完毕即可，要使服务器后台运行，按下ctrl+a,d后screen将处于后台。恢复screen输入： screen -r mc 终止服务器直接 ctrl+c 即可 Forge服务器 ","date":"2018-08-03","objectID":"/mc-linux-server/:4:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"介绍 如果服务端需要运行一些mod（例如著名的暮色森林mod），此时spigot就不再适用了，而Forge正是为mod而生的服务端和客户端工具。 ","date":"2018-08-03","objectID":"/mc-linux-server/:5:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"安装 在Forge下载页面选择需要的forge版本，生成服务端所需的文件要在本地新建一个空文件夹，生成所需文件后整体上传到服务器。 ","date":"2018-08-03","objectID":"/mc-linux-server/:6:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"mod配置 将mod直接拖入mod文件夹即可。 ","date":"2018-08-03","objectID":"/mc-linux-server/:7:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"运行服务器 运行forge*.jar文件即可创建服务器。具体可参考Spigot中的 运行服务器一节 Sponge ","date":"2018-08-03","objectID":"/mc-linux-server/:8:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"介绍 Sponge据说是同时支持Bukkit插件和MOD功能的服务器端工具，具体没用使用过，大家可以去官网自行阅读文档安装体验。 server.properties说明 generator-settings= #用於設定超平坦世界的函數，留空即可 op-permission-level=4 #設定OP的許可權等級 allow-nether=true #是否允許生成/進入下界 level-name=world #世界名稱及其文件夾名 enable-query=false #允許使用GameSpy4協議的伺服器監聽器（用於收集伺服器信息） allow-flight=false #是否允許玩家在生存模式透過MOD飛行 announce-player-achievements=true #是否公開顯示玩家成就 server-port=25565 #伺服器端口（默認為25565） level-type=DEFAULT #世界類型 enable-rcon=false #是否允許遠程訪問伺服器控制台 level-seed= #世界種子 force-gamemode=false #玩家是否總是以默認游戲模式進入伺服器 server-ip= #伺服器IP，一般來說留空即可 max-build-height=256 #最高建築高度（最高256） spawn-npcs=true #是否生成村民NPC white-list=false #是否開啟白名單認證 spawn-animals=true #是否生成動物 hardcore=false #是否開啟極限模式 snooper-enabled=true #是否允許伺服器定期發送統計數據 online-mode=true #是否開啟正版認證（開啟後只有正版玩家可進入） resource-pack= #資源包URL（可讓玩家選擇是否使用伺服器提供的資源包） pvp=true #可否PVP difficulty=1 #難度 enable-command-block=false #是否可以使用命令方塊 gamemode=0 #默認游戲模式 player-idle-timeout=0 #如果該玩家無反應超過設定值（單位：分鐘），將會被踢出 max-players=20 #最大玩家數量 spawn-monsters=true #是否生成怪物 generate-structures=true #是否生成建築物 view-distance=10 #客戶端視野距離的上限 motd=A Minecraft Server #伺服器在伺服器列表頁所顯示的信息 MC客户端 推荐使用HMCL。 ","date":"2018-08-03","objectID":"/mc-linux-server/:9:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"安装optifine 虽然HMCL中有自动安装optifine的功能，但经常会出现依赖配置错误导致的运行失败，所以optifine和forge推荐自行安装。选择对应版本下载optifine，之后将jar文件导入mod或使用HMCL提供的MOD管理导入即可。 ","date":"2018-08-03","objectID":"/mc-linux-server/:10:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"安装forge 在Forge下载页面选择需要的forge版本，安装客户端forge时需要选中游戏所在的.minecraft文件夹（不是公共资源文件夹），然后点击安装即可。 ","date":"2018-08-03","objectID":"/mc-linux-server/:11:0","tags":null,"title":"Minecraft服务器搭建","uri":"/mc-linux-server/"},{"categories":null,"content":"样例 我们要达到的视频效果是这样的 确定压缩目标 bilibili不进行二压的参数要求如下： 视频码率最高1800kbps（H264/AVC编码） 音频码率最高192kbps（AAC编码） 分辨率最大支持1920x1080 level≤4.1 关键帧平均至少10秒一个 色彩空间yuv420 位深8bit 声道数≤2 采样率=44100 （不满足条件的视频会被系统二次压制） FFMPEG压制 这里先给出全部命令： ffmpeg -i $argv[1] -vcodec libx264 -preset veryslow -profile:v high -level:v 4.1 -pix_fmt yuv420p -b:v 1780k -r 60 -acodec aac -strict -2 -ac 2 -ab 128k -ar 44100 -pass 1 -f flv /dev/null; and ffmpeg -i $argv[1] -vcodec libx264 -preset veryslow -profile:v high -level:v 4.1 -pix_fmt yuv420p -b:v 1780k -r 60 -acodec aac -strict -2 -ac 2 -ab 128k -ar 44100 -pass 2 -f flv $argv[2] 这里总共执行了两条命令，下面详细说一下。 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:0:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"-i $argv[1] 这里指定了目标视频路径，也就是要处理的视频文件 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:1:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"-vcodec libx264 使用X264编码器 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:2:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"-preset veryslow 使用h.264的最佳编码，牺牲了编码速度。因为b站1800的码率如果不采用最佳编码，会导致画面极度模糊。 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:3:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"-profile:v high -level:v 4.1 设备兼容性，这里不需要修改 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:4:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"-pix_fmt yuv420p 色彩空间yuv420p，b站要求 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:5:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"-b:v 1780k 码率采用1780，如果采用上限1800实际结果将有个可能超过这个值，从而被二压 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:6:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"-r 60 视频帧率为60FPS ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:7:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"-pass 1 说明当前处理为第一次处理，为了达到稳定的视频目标参数我们需要进行两次压制，第二条命令就是第二次压制 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:8:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"acodec aac -strict -2 -ac 2 -ab 128k -ar 44100 音频参数，说明使用acc解码器，双声道，128K码率，44.1k采样率，都是b站的上限数值 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:9:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"-f flv 视频格式为flv 上传视频 经过本地的两次压制，上传到b站后就不会被二压，从而保证了60fps的帧率。 ","date":"2017-12-19","objectID":"/compress-video-by-ffmpeg/:10:0","tags":["Tutorial"],"title":"使用ffmpeg压缩60FPS视频并上传至Bilibili","uri":"/compress-video-by-ffmpeg/"},{"categories":null,"content":"啰嗦几句 权利的游戏终于又更新啦，然而目前网络没有IPV6所以怎么下载资源成了最大的问题，试了试公网上的bt，速度慢的令人发指，所以决定还是想办法通过IPV6下载资源 需要提前准备的资源 必须要有的： 一台能访问IPV6资源的服务器（本文使用一台Ubuntu Server 16.04） 一个BT账号（北邮人应该都有吧） 如果是校内服务器，还需要下载GlobalProtect，后续步骤默认开启VPN 以下资源是非必需的： 独立域名（方便自己记住域名，我就是这么懒） 步骤 ","date":"2017-08-14","objectID":"/remote-torrent-sys/:0:0","tags":["Linux","Tools"],"title":"Linux Server使用IPV6 BT资源","uri":"/remote-torrent-sys/"},{"categories":null,"content":"安装Deluge Deluge后端使用libtorrent，可以在多个平台上使用 sudo apt install deluge ","date":"2017-08-14","objectID":"/remote-torrent-sys/:1:0","tags":["Linux","Tools"],"title":"Linux Server使用IPV6 BT资源","uri":"/remote-torrent-sys/"},{"categories":null,"content":"安装Deluge-web Deluge-web可以将Deluge在浏览器中以可视化的方式展现出来，应该没人希望通过复杂的命令行方式操作吧 sudo apt install deluge-webui ","date":"2017-08-14","objectID":"/remote-torrent-sys/:2:0","tags":["Linux","Tools"],"title":"Linux Server使用IPV6 BT资源","uri":"/remote-torrent-sys/"},{"categories":null,"content":"运行Deluge 启动Deluge后还需要手动启动Deluge-webui，这里使用screen启动webui sudo systemctl start deluged screen -S deluge deluge-web 这时在浏览器中访问 http://your-server-ip:8112 就可以看到熟悉的bt下载界面了，默认的密码是deluge ","date":"2017-08-14","objectID":"/remote-torrent-sys/:3:0","tags":["Linux","Tools"],"title":"Linux Server使用IPV6 BT资源","uri":"/remote-torrent-sys/"},{"categories":null,"content":"懒人必备（非必须步骤） 一串数字的网址毕竟不太好记忆，况且还有一个8112的端口号，所以接下来使用dnspod和nginx实现域名访问 ","date":"2017-08-14","objectID":"/remote-torrent-sys/:4:0","tags":["Linux","Tools"],"title":"Linux Server使用IPV6 BT资源","uri":"/remote-torrent-sys/"},{"categories":null,"content":"安装nginx sudo apt install nginx ","date":"2017-08-14","objectID":"/remote-torrent-sys/:4:1","tags":["Linux","Tools"],"title":"Linux Server使用IPV6 BT资源","uri":"/remote-torrent-sys/"},{"categories":null,"content":"创建配置文件 在 /etc/nginx/conf.d/ 目录下新建一个配置文件，名称随意后缀为.conf，针对8112端口的配置实例如下： server { listen 80; server_name [你的域名]; location / { proxy_redirect off; proxy_pass http://127.0.0.1:8112; } } 如果要配置其他端口的照猫画虎再填一个就行了，因为在 /etc/nginx/nginx.conf 默认读入了conf.d文件夹下的配置文件，所以不再需要动它的默认配置文件 ","date":"2017-08-14","objectID":"/remote-torrent-sys/:4:2","tags":["Linux","Tools"],"title":"Linux Server使用IPV6 BT资源","uri":"/remote-torrent-sys/"},{"categories":null,"content":"重启nginx sudo systemctl restart nginx.service ","date":"2017-08-14","objectID":"/remote-torrent-sys/:4:3","tags":["Linux","Tools"],"title":"Linux Server使用IPV6 BT资源","uri":"/remote-torrent-sys/"},{"categories":null,"content":"绑定域名 在DNS服务商添加一条A记录，域名为上文中的域名，ip指向服务器IP即可，等DNS生效就可以通过二级域名访问Deluge了 资源取回 可以选择把资源从服务器上下下来本地观看，也可以使用Potplayer等支持远程视频播放的软件直接观看。 ","date":"2017-08-14","objectID":"/remote-torrent-sys/:4:4","tags":["Linux","Tools"],"title":"Linux Server使用IPV6 BT资源","uri":"/remote-torrent-sys/"},{"categories":null,"content":"目前个人所使用过的方法有三种 使用代理 vpn或者ss都是很好的选择，个人正在使用ss，主要是因为IPV6的ss不仅可以实现校园网免流，而且速度也比普通的ipv4快。ss的一些配置教程在网上很容易搜到。 ","date":"2016-09-18","objectID":"/how-to-use-google/:0:0","tags":["Tutorial"],"title":"国内谷歌使用指南","uri":"/how-to-use-google/"},{"categories":null,"content":"Windows配置SS 下载的地址, 然后根据wiki进行配置即可 ","date":"2016-09-18","objectID":"/how-to-use-google/:1:0","tags":["Tutorial"],"title":"国内谷歌使用指南","uri":"/how-to-use-google/"},{"categories":null,"content":"Ubuntu配置SS 执行命令： sudo apt install shadowsocks 然后实现一个config文件即可 使用第三方hosts 这种方式的优点是操作简单，缺点是有可能不太稳定，需要定期更新列表，下面是本人长期使用的一个源 ipv4 hosts ipv6 hosts ","date":"2016-09-18","objectID":"/how-to-use-google/:2:0","tags":["Tutorial"],"title":"国内谷歌使用指南","uri":"/how-to-use-google/"},{"categories":null,"content":"Windows修改hosts 修改 C:\\Windows\\System32\\drivers\\etc 下的hosts文件，将内容替换为第三方hosts。 ","date":"2016-09-18","objectID":"/how-to-use-google/:3:0","tags":["Tutorial"],"title":"国内谷歌使用指南","uri":"/how-to-use-google/"},{"categories":null,"content":"Ubuntu修改hosts 修改 /etc/hosts， 将内容替换为第三方hosts 使用国内谷歌镜像 配合chrome可以实现地址栏直接搜索谷歌内容，首先需要搜索一个谷歌镜像网站，比如这个，此处以 https://g.inspire-energy.com.cn/ 这个网址为例 ","date":"2016-09-18","objectID":"/how-to-use-google/:4:0","tags":["Tutorial"],"title":"国内谷歌使用指南","uri":"/how-to-use-google/"},{"categories":null,"content":"配置Chrome搜索 首先在镜像站中随便搜一个关键词，如搜索 ingbyr 得到如下结果 发现其搜索关键词在 #q=ingbyr ，此时打开Chrome设置，找到如下所示的部分，点击管理搜索引擎 前两项随便填，最后一项填入 https://g.inspire-energy.com.cn/#q=%s ，注意将ingbyr替换为%s，如图 然后选择设置为默认搜索引擎，如图 此时就可以直接在地址栏使用谷歌搜索啦~ ","date":"2016-09-18","objectID":"/how-to-use-google/:5:0","tags":["Tutorial"],"title":"国内谷歌使用指南","uri":"/how-to-use-google/"},{"categories":null,"content":"微波通信 今天的实习内容为“微波通信”。这次讲课中刘老师带我们回顾了一个微波通信系统是如何工作的，演示了一个微波中继基站的实际工作方式，详细讲解了一些重点的相关理论，这些都让我有一种豁然开朗的感觉，个人认为对以后考研复习有很大帮助。下午的上课时间由同学们自由组队，进行了小组展示，展示的内容是QPSK、载波提取等通信系统中常见的基本理论。我们小组展示了线路编码的基本理论，让我对编码有了进一步的认识。 程控交换及运营模拟 今天的实习内容是“程控交换及模拟运营“。吴老师在课程开始时提到本次专业实习的目的是：树职业意识、培养职业素质、积累职业经验、掌握职业技能，刚开始听到时没有太大的感触，但老师随后演示了多种拨号方式，结合所学知识讲解了为什么可以用多种方式进行拨号。然后大家阅读了《沙盘模拟式实习指导手册》，为下午的情景模拟做准备。下午上课大家分为三组，分别模拟用户、服务人员、技术人员，就如何互相沟通、合作等展开了情景模拟，在将近1小时的模拟中，我深刻认识到做一个合格的运营商需要付出很多。本次实习获益匪浅。 计算机网络及运营模拟 今天的实习内容是“计算机网络及运营模拟”。首先吴老师让我们根据自己的理解画出了一个校园网组织架构图，然后通过一步一步的纠正让我们对校园网架构有了初步的了解，然后以校园网为出发点，大家分组自行设计一个实际的运行架构图并讨论其可行性。下午我们使用实验室的主机、交换机和路由器对上午的设想进行模拟验证。我们组希望搭建一个异地容灾备份的拓扑图，其中使用两台主机模拟服务器，都连接之一个交换机，然后通过路由器进行联网，第三台主机模拟资源请求。因为之前现代通信技术已经做过类似的组网实验，所以在搭建拓扑时没有遇到太大的困难，然而由于对ftp使用不熟练，没有成功搭建起来一个服务器，比较可惜。这次实验让我对组网有了更深次的理解。 电声演播数字电视 今天的实习内容是“电视演播数字电视”。姜老师首先带领我们参观了一些上个世纪的多媒体设备，其中印象最深刻的就是一个音频处理设备。据老师所说，这套设备是联合国教科文组织当时提供资金给北邮进行建设的，83年版本的西游记就是在这里完成的后期配音。这一点就可以感受到当时的北邮实力相当雄厚。参观完设备后老师向我们讲解了多媒体通信中的一些相关理论知识，例如视频压缩编码等，结合之前相关理论课的知识，初步了解了多媒体通信中使用到的技术和要解决的问题。听完老师的讲解之后，我对多媒体有了新的认识。 光通信 今天的实习内容是“光通信”。老师首先讲解了ADM设备在光通信中的作用，ADM时一种多路低俗的电信号转换为一路高速的光信号设备，在光通信中占据着很重要的作用。然后使用了三台由华为生产的ADM进行了组网实验，将三台ADM进行环形链接，组成一个SDN环网，该网具有一定的容灾能力。随后老师讲解了光纤的熔接技术，由于光纤的弱导特性，需要对两段光纤链接进行特殊的处理。一种是采用冷接的技术，就是在光纤端口处加上一种连接口，好处是操作方便，缺点是在连接处损耗大（可以达到1db），所以在实际的大型工程中不常用。工程中使用的时热接技术，即熔接。在老师的指导下我们进行了两段光纤的熔接操作，在一系列步骤后成功将两段光纤进行了熔接。下午在一个光通信实验室参观了很多种光通信中实际使用的设备，随后在指导下分组进行了软件模拟实验和SDN软件定义网络的操作实验。本次实验让我第一次接触到了光通信，收货颇多。 音视频处理 今天的实习内容是“音视频处理”。老师讲解了一些在现代多媒体通信中常见的几种手段，展示了一些编码算法等。然后又向我们讲解机器学习导论，姜老师通过讲解ppt向我们展示了机器学习、模式识别、统计识别、计算机视觉和语音识别等基础概念，老师以百度识图和siri生动的展示了这几个学科的实际应用情况。随后重点讲解了一些算法背景，如深度学习等。通过这次导论课，我了解到了机器学习在现在的社会中已经处于重要的地位，许多工程都离不开机器学习。我对机器学习也有了初步的了解，它是一门多领域交叉学科，涉及到概率论、统计学等等多种学科，主要目标时设计和分析一些让计算机可以自学习的算法。机器学习是现在的一个热门学科，它将会对人类发展起到不可或缺的贡献。 天线、射频 今天的实习内容是“天线与射频”。老师讲了天线实验所需要的试验环境和一些基本注意事项，实验环境原本是要求一个暗室，但由于学校实验室建设受到的限制无法满足，所以实验作为定性实验来演示。演示实验包括两个，一个是电路方面的测量天线输入阻抗，另一个是辐射方面的天线方向图。第一个天线输入组坑测量的基本原理是以史密斯圆图为坐标系，使用网络分析仪来进行测量，在测量之前有很重要的一步，即使用校准件校准仪器，校准完毕后老师测量了三个不同天线的册数。在天线方向图的实验开始时，老师介绍了本次实验中使用的八木天线，因为这种天线往往使用了较多的引向器，所以看起来像是鱼骨而得名。因为八木天线具有增益高、方向性强、结构简单的优点，它被广泛应用在无线电测向和长距离无线电通信。而是描述天线或其它信号源发出无线电波的强度与方向（角度）之间依赖关系的图形。这次实验对天线参数的测量有了基本的了解。 网优网规路测 今天的实习内容是“网优网规路测”。老师提到了TD-LTE覆盖优化的问题。TD-LTE网络一般时同频组网，同频干扰严重，所以良好的覆盖和干扰控制对网络性能意义重大。覆盖优化主要是消除网络中存在的四中问题：覆盖空洞、弱覆盖、越区覆盖和导频污染，优化的目标有RSPR、RSRQ等指标。介绍完毕后老师给每个小组分发了手持式无线网络测试终端，每个小组在室外进行LTE信号的测试。我们组围绕着主楼和操场进行了500次ping操作。下午上课的时候将数据导入电脑中，使用分析软件进行了数据分析，并且将结果以总结报告的形式导出，简要分析了报告中的参数指标和其他内容。对于报告中暴漏的缺陷或问题，可以通过覆盖优化进行解决。常见的手段有调整天线下倾角、调整天线方位角、调整RS功率、新增站点等等。老师在实验过程中提供了很多的帮助。 移动通信 今天的实习内容是“移动通信”。老师重点讲解了TD-LTE 的基本原理和现状。TD-LTE的出现，是因为3G制式：WCDMA、CDMA2000和TD-SCDMA不兼容，所以要融合成为LTE。LTE的突出特点是宽带高、系统架构层数比以前架构更少，所以延迟较低。老师还介绍了MIMO技术，即多天线技术，MIMO的核心概念为利用多根发射天线与多根接收天线所提供之空间自由度来有效提升无线通信系统之频谱效率，以提升传输速率并改善通信质量。由于MIMO可以在不需要增加带宽或总发送功率耗损的情况下大幅地增加系统的数据吞吐量及发送距离，使得此技术于近几年受到许多瞩目。随后老师通过配置实验室两台RRU和手持终端，让我们体验了在不同参数配置下的TD-LTE服务质量。其中通过改变编码方式，可以在FTP测试中明显感受到下行带宽的巨大变化。这次实习让我深入的了解了现在TD-LTE的基本原理和发展状况。 ","date":"2016-07-04","objectID":"/campus-internship-report/:0:0","tags":["Summary"],"title":"大三校内实习报告","uri":"/campus-internship-report/"},{"categories":null,"content":"北邮校园网网关登陆工具，适配新网关 ngw.bupt.edu.cn。已开源至 GitHub。 ","date":"2016-04-14","objectID":"/bupt-net-login/:0:0","tags":["Python","Tools"],"title":"北邮网关登陆工具","uri":"/bupt-net-login/"},{"categories":null,"content":"安装 使用pip安装 pip3 install BUPTNetLogin 使用便携版 下载页面 ","date":"2016-04-14","objectID":"/bupt-net-login/:1:0","tags":["Python","Tools"],"title":"北邮网关登陆工具","uri":"/bupt-net-login/"},{"categories":null,"content":"使用方法 使用命令 bnl user@server ~\u003e bnl usage: bnl [-h] [-l {dx,xyw,lt,yd}] [-u USERNAME] [-p PASSWORD] [-lo] [-v] 北邮校园网网关登陆工具 optional arguments: -h, --help show this help message and exit -l {dx,xyw,lt,yd}, --login {dx,xyw,lt,yd} 登陆北邮校园网网关，LINE可用参数 xyw（校园网）、lt（联通）、yd（移动）、dx(电信) -u USERNAME, --username USERNAME 校园网账户名称 -p PASSWORD, --password PASSWORD 校园网账户密码 -lo, --logout 注销北邮校园网网关 -v, --version 版本信息 登陆联通网络举例： user@server ~\u003e bnl -l lt -u 用户名 -p 密码 注销网络举例 user@server ~\u003e bnl -lo ","date":"2016-04-14","objectID":"/bupt-net-login/:2:0","tags":["Python","Tools"],"title":"北邮网关登陆工具","uri":"/bupt-net-login/"},{"categories":null,"content":"更新 pip3 install BUPTNetLogin --upgrade ","date":"2016-04-14","objectID":"/bupt-net-login/:3:0","tags":["Python","Tools"],"title":"北邮网关登陆工具","uri":"/bupt-net-login/"},{"categories":null,"content":"依赖库 使用pip将自动安装以下库： requests lxml ","date":"2016-04-14","objectID":"/bupt-net-login/:4:0","tags":["Python","Tools"],"title":"北邮网关登陆工具","uri":"/bupt-net-login/"},{"categories":null,"content":"自行编译便携版 win: .\\venv\\Scripts\\pyinstaller -n bnl --noupx -c -F .\\app\\bupt_net_login.py linux: ./venv/bin/pyinstaller -n bnl --noupx -c -F ./app/bupt_net_login.py ","date":"2016-04-14","objectID":"/bupt-net-login/:5:0","tags":["Python","Tools"],"title":"北邮网关登陆工具","uri":"/bupt-net-login/"},{"categories":null,"content":"开发环境配置 ","date":"2016-02-17","objectID":"/vuforia-hello-world/:0:0","tags":null,"title":"Unity3D/Android/Vuforia环境搭建","uri":"/vuforia-hello-world/"},{"categories":null,"content":"安装包下载 点击下方文字进行安装，请自备梯子 Unity3D Android SDK Vuforia SDK ","date":"2016-02-17","objectID":"/vuforia-hello-world/:1:0","tags":null,"title":"Unity3D/Android/Vuforia环境搭建","uri":"/vuforia-hello-world/"},{"categories":null,"content":"U3D配置 配置编译安卓的环境，如下图所示 第一个虚拟现实应用 参考 https://developer.vuforia.com/library/articles/Solution/Compiling-a-Simple-Unity-Project ","date":"2016-02-17","objectID":"/vuforia-hello-world/:2:0","tags":null,"title":"Unity3D/Android/Vuforia环境搭建","uri":"/vuforia-hello-world/"},{"categories":null,"content":"创建一个新项目 U3D中新建项目，双击下载好的SDK：vuforia-unity-xx-yy-zz.unitypackage 将SDK导入到项目中，完成后如下图 ","date":"2016-02-17","objectID":"/vuforia-hello-world/:3:0","tags":null,"title":"Unity3D/Android/Vuforia环境搭建","uri":"/vuforia-hello-world/"},{"categories":null,"content":"导入应用Key 在Vuforia官网中生成一个key，复制key到项目中的ARCamera的属性key中，如图 ","date":"2016-02-17","objectID":"/vuforia-hello-world/:4:0","tags":null,"title":"Unity3D/Android/Vuforia环境搭建","uri":"/vuforia-hello-world/"},{"categories":null,"content":"导入素材 删除默认Camera，导入AR Camera,导入IamgeTarget。将识别目标图片上传至目标管理页面，下载data双击导入到项目中，将IamgeTarget属性Data Set设置为刚刚导入的data。然后随便新建一个3D素材，此处以立方体为例，将新建的Cube拖至IamgeTarget 的Children中，并调整至ImageTarget的中央，如图 随后将AR Camera其中的输入设置如下 ","date":"2016-02-17","objectID":"/vuforia-hello-world/:5:0","tags":null,"title":"Unity3D/Android/Vuforia环境搭建","uri":"/vuforia-hello-world/"},{"categories":null,"content":"应用发布 记得修改Bundle Identifier 然后点击build and run 即可 ","date":"2016-02-17","objectID":"/vuforia-hello-world/:6:0","tags":null,"title":"Unity3D/Android/Vuforia环境搭建","uri":"/vuforia-hello-world/"},{"categories":null,"content":" 微芯2016北邮奖学金获奖作品 视频演示 汇编部分 status equ 03h portc equ 07h trisc equ 87h portd equ 08h ;hw,smoke trisd equ 88h porta equ 05h trisa equ 85h porte equ 09h ;re0蜂鸣器 低有效 trise equ 89h ;keyborad portb equ 06h trisb equ 86h ;=================定时器tmr0=================== tmr0 equ 01h option_reg equ 81h intcon equ 0bh tmr0b_fast equ 128 tmr0b_slow equ 0 ;==================常量定义=================== count equ 21h ;电机转数 ljt_status equ 22h ;桶盖状态，0为关闭，1为打开状态 jp_status equ 23h ;键盘状态 yw_status equ 24h ;yw ;===================体1设置========================= org 000h nop bsf status,5 bcf status,6 ;转到体1 movlw 00h ;电机四位信号输出 movwf trisc movlw 0ffh movwf trisd ;红外信号一低两位输入,0为遮挡 movlw 0ffh ;设置ra为输入 movwf trisa movlw 0ffh ;rb输入 movwf trisb movlw 00h ;蜂鸣器输出 movwf trise movlw 03h ;分频数 movwf option_reg bcf option_reg,3 ;分频器分配给tmr0 bcf option_reg,4 ;上升沿tmr0递增 bcf option_reg,5 ;内部时钟提供时钟源 bcf option_reg,7 ;启用b端口上拉电阻 goto init ;=====================体0设置===================== init bcf status,5 ;转到体0 movlw 00h ;输出初始化 movwf portc movwf ljt_status ;桶盖初始状态为0 movlw 0ffh ;蜂鸣器初始不工作 movwf porte movlw 01dh ;电机初始转数 movwf count nop nop goto main ;======================主程序==================== main call scan ;调用键盘扫描 call yw_gy movlw 01dh ;电机初始转数 movwf count btfsc portd,0 goto work1 btfss ljt_status,0 ;若桶盖为1,跳过正转 call djzz ;电机正转 work1 movlw 01dh ;电机初始转数 movwf count btfss portd,0 goto main btfsc ljt_status,0 ;若桶盖为0,跳过反转 call djfz ;电机反转 goto main ;==============键盘扫描=============== scan ;第一行扫描 movlw B'11111110' movwf portb nop nop bsf status,5 ;到体1，转换方向 movlw 0f0h movwf trisb bcf status,5 ;返回体0 movf portb,0 movwf jp_status ;键盘状态读入通用寄存器 btfss jp_status,4 goto set_flag1 btfss jp_status,4 goto scan btfss jp_status,5 goto set_flag2 ;第二行扫描 bsf status,5 ;到体1，转换方向 movlw 0fh movwf trisb bcf status,5 ;返回体0 movlw B'11111101' movwf portb nop nop bsf status,5 ;转换方向 movlw 0f0h movwf trisb bcf status,5 ;返回体0 movf portb,0 movwf jp_status btfss jp_status,4 goto set_flag3 btfss jp_status,5 goto set_flag4 return ;============标志测试============= set_flag1 ;电机正转打开桶盖 movlw 01dh ;电机初始转数 movwf count call djzz bsf ljt_status,0 return set_flag2 ;电机反转关闭桶盖进入工作状态 movlw 01dh ;电机初始转数 movwf count call djfz bcf ljt_status,0 return set_flag3 ;无 return set_flag4 ;无 return ;=====================电机正转===================== djzz call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast movlw 080h movwf portc call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast movlw 0c0h movwf portc call delay_fast call delay_fast call delay_fast call delay_fast movlw 040h movwf portc call delay_fast call delay_fast movlw 060h movwf portc call delay_fast call delay_fast movlw 020h movwf portc call delay_fast call delay_fast movlw 030h movwf portc call delay_fast call delay_fast movlw 010h movwf portc call delay_fast call delay_fast movlw 090h movwf portc call delay_fast call delay_fast decfsz count,1 goto djzz bsf ljt_status,0 ;桶盖打开标志1 return ;======================电机反转==================== djfz call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast movlw 090h movwf portc call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast call delay_fast movlw 010h movwf portc call delay_fast call delay_fast call delay_fast call delay_fast movlw 030h movwf portc call delay_fast call delay_fast movlw 020h movwf portc call delay_fast call delay_fast movlw 060h movwf portc call delay_fast call delay_fast movlw 040h movwf portc call delay_fast call delay_fast movlw 0c0h movwf portc call delay_fast call delay_fast movlw 080h movwf portc call delay_fast call delay_fast call hwgy_tg_open ;检测满，是则蜂鸣 decfsz count,1 goto djfz bcf ljt_status,0 ;桶盖关闭0 call delay_fast call hwgy_tg_close ;检测清空 return ;==============红外感应=================== ;红外感应使桶盖打开 rd0 hwgy_open call delay_slow call delay_slow call delay_slow btfsc portd,0 goto hwgy_open return ;红外感应使桶盖关闭 rd0 hwg","date":"2015-11-21","objectID":"/pic16f877-ljt/:0:0","tags":null,"title":"基于PIC16F877单片机的智能垃圾桶","uri":"/pic16f877-ljt/"},{"categories":null,"content":"大一 在北邮的大一生活已经正式结束了，回顾这一年的学习生活，无路在学习还是日常生活乃至人际交往上，总有成功也有失败，这些都让我迅速的成长起来——学会独立思考，学会为自己的选择负责，学会享受成功的喜悦，学会默默承受失败的痛苦，学会成熟。 ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:0:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"},{"categories":null,"content":"一、生活状况 因为北京的气候和饮食习惯与家乡相差不大，所以没有什么水土不服的问题，只是第一次一个人这么长时间在外，第一次住集体宿舍，起初难免有点无法适应这种局面，但随着交到了新的朋友，与1204寝室的同学打成一片，我也慢慢适应了大学的新生活。 ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:1:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"},{"categories":null,"content":"二、情感状况 由于高中自己忙于学业，而且父母期望也比较高，所以一直没有打算谈恋爱，再加上高中自己还是比较内向，喜欢自己做自己喜欢的事，导致我的交际圈也不是很大，没有刻意去结交一些朋友，所以一直没有谈恋爱。大一的生活改变了我很多，我明白了主动去结交一些朋友是很好的，但是缺乏经验的我还是在大一持续单身。 ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:2:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"},{"categories":null,"content":"三、学习状况 高考结束后我像大部分人一样立志要在大学好好学习，但是因为一些社团和学生会的事情，耽误了很多自习的时间，甚至在考试前还得忙着与考试无关的事情，本来想中途放弃除学习以外的事物，但最终还是因为各种各样的原因没有执行。虽然学习受到了影响，但还是收获颇多，我学会了如何分配时间，如何安排繁杂的事物，如何调整自己的心态等等。但我知道，现实是成绩很不理想，大部分科目处于70+，一部分80+，看着别人的成绩，我知道我在大一不够努力。 ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:3:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"},{"categories":null,"content":"四、学生会和社团 社团我参加了乒乓球协会和一个科幻基地，科幻基地在后来我发现是一个很水的社团，于是去过2次变再没有参加过其活动，而乒乓球协会由于加入了中心组，事情比较多，但我还是很高兴能加入这个社团，在这里不仅锻炼了身体，还结识了很多同学。学生会是大一中途室友拉进去的，本来没有太大的意愿加学生会，但还是干够了一年，其中也出了不少宣传品，大家在一起努力为学院的活动提供支持，我还是很开心的。 ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:4:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"},{"categories":null,"content":"五、业余爱好 小时候学过绘画、萨克斯、书法，因此对这些都有点兴趣，但到高中就慢慢都放弃了，取而代之是喜欢上了用PhotoShop制作自己喜欢的图片，听一些萨克斯的曲子，也喜欢玩电脑游戏和桌游，但我对网游不是很喜欢，因此一直接触的是单机和fps竞技游戏，这些不仅能放松自己，也能锻炼自己的逻辑和反应速度，最终要的一点是，不会沉迷。还有就是非常喜欢中国象棋，虽然算不上高手但也一直坚持了下来。乒乓球是我最喜欢的运动项目，每周基本都回去乒乓球教室和朋友打球。（好吧，这是一篇大一总结，要交的那种） 大二 颇多收获，却也失去了许多 ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:5:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"},{"categories":null,"content":"学习 模电，信号，数据结构，概率论，大物，毛概，英语还有各种各样的实验课，交织出了这个疯狂的大二上。忙，真的很忙，忙着学新的内容，忙着做实验······虽然在开始时再次决定好好学习，但是似乎还是失败了。大一的时候，在学业之外，还自学了ps,pr,ae等软件，熟悉了怎样装系统，倒腾着各种软件。而大二上则有点颓废，除了假期接触了下安卓开发，在上课期间就再没有干过什么了（最近get了拆机清灰和hexo搭个人博客，还算可以）。 ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:6:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"},{"categories":null,"content":"工作 辞掉了学生会的工作，不再在宣传部做海报了；退了乒协的中心组，社团活动再也没有去过； 学委的工作一直从头忙到尾，甚至毛概课布置给学委的任务都已经排到了下学期开学； 自己的大创项目也草草收尾了，将近半年的心血付诸东流，虽然学生会的工作、社团活动都为它做了让步，但一个人又能怎样，毕竟当初的设想是一个团队的合作才能实现。 学委的工作已经没有心思再继续干下去了，下学期准备辞了然后去试着追寻自己的目标：独立游戏开发者，或许是安卓平台，或许是pc，还没有很明确的目标。 ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:7:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"},{"categories":null,"content":"生活 搬到了久闻大名的本部将军冢，住宿环境就不多说了，毕竟我邮人多······。情感问题依旧，单身狗一枚，其中经历了一些事，很伤心；cs打的有点多，不过因此认识了很多新朋友，还是很开心的。还有就是校园网居然收费了，这渣网也好意思······，不得不使用一些非常规手段规避收费了（不要问我怎么做到的 :P）更新博客要耗很多流量的好啵 =_= ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:8:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"},{"categories":null,"content":"期望 1、下学期学业能有大的改观 2、脱单 3、能基本掌握安卓开发 4、尝试开发自己第二款游戏（第一款简直渣） 5、尝试ACM 6、cs能找到更多的队友 :P 7、博客不断更 就这样吧 2014，我们一起经历了太多。这一年，和我们一起你寻获了什么？知识？乐趣？还是难忘的记忆？ 这一年，世界痛失3架飞机，幸好我们还有维珍和南航的英雄机长。 这一年，ISIS带着血腥和极端的姿态立国，文明与他们的战争才刚刚开始。 这一年，WhatsApp以190亿美元嫁入Facebook，Uber和小米估值超过400亿美元，阿里成功赴美上市。互联网，仿佛已进入一个更灿烂的纪元。 这一年，苹果用两部新手机再次令世界疯狂；而诺基亚，作为一个手机品牌与这个世界暂时挥别。 这一年，“罗塞塔”完成10年64亿公里的旅行，将探测器“菲莱”降落在彗星上。 这一年的你，又去了哪里旅行呢？ 明天2015，我们又要一起出发了对吗？ 新年快乐。 ","date":"2015-05-19","objectID":"/sum-of-2014-2015/:9:0","tags":null,"title":"2014/2015年总结","uri":"/sum-of-2014-2015/"}]